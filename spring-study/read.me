#1 環境構築
1・STSのインストール
2・プロジェクトの作成
　このプロジェクトを使用せず新規作成する
　このテキストから必要な依存ライブラリを設定する
　ダイアログとこれ見比べたら出来る
3・依存したライブラリを調べ概要を理解する

#2 javaの実装・DI
1・HelloAPITest#testHelloのコメントを元にテストケースが通る実装
　- HelloAPITest#testHelloがグリーンであること
　- ローカルサーバーでWebアクセスしてみる

2・HelloServiceTestのコメントを元にテストケースが通る実装
　- HelloServiceTestがオールグリーンであること

3・HelloAPITest#testEmpのテストケースが通る実装
　- HelloAPITestがオールグリーンであること

#4 AOP
1・interceptorによるサービスのメソッドスタート・エンドのログ&sysout出力
 注：interceptorパッケージ以外変更無し
 ヒント： ..*.*(..)
 - コンソールウィンドウにログ出力されること
 
2・HelloServiceTest#testGetAOPValueのコメントを元にテストケースが通る実装
 - AOPで出来ることの一片を知る
 注：ログインなどはfilter(Spring Security)を使うのが正しい

#9 OOP
なにかやるというより注意点の説明か

1・以下パッケージは使用不可を基本とする
・util
設計初歩段階でこの辺を使用することに慣れるのは好ましくない
ただのメソッド集になるだけ
・manager
設計思想的に正しい役割になりにくい
F/Wやライブラリ作ってるわけではないないんだからほぼ存在しない
作るケースがあるならそれは適切な設計が行われていない

2・抽象化
1と同様に抽象化クラスで全てを定義してしまうアンチパターンがある
ただ、こちらは正しく使うべき物

3・インナークラス・匿名クラス
基本使わない方がコードの見通しが良くなる。
よほど正しく設計できている状況でないかぎり使わない方がよい。

3・設計粒度を考える
プロジェクト規模に合わない粒度は遅延の元となる
メンバースキルに見合わない粒度では自分が疲弊する
目に見えてない拡張を想定した設計や実装は負債が残るだけのアンチパターン

4・自分を設計してみる
社会人、社員、部門、自分、体、人間、右手、左手、手、握る、走る
を（single extendでの）適切な設計を考える

5・自分で設計してテストケースを書いてみる
テストをしやすい設計＝疎結合な設計と体感出来る
ただのメソッド集でもテストしやすいがそれに気が付かないなら諦めるしかない

6・GoFを理解し適用を考える
日本語ではなくコードとUMLで理解する方が正しく理解出来る
1・ManyifService#todoRefactorをChain-of-responsibilityでリファクタしてみる

9・適材適所
ただの「考え方の一つ」という認識が必要
万能でも絶対正義でもない
RDB設計脳がKVS設計で適合しないように、OOP設計脳がマイクロ・サーバレスサービス設計で苦労することもある